AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Scan invasions files
Resources:
  InvasionBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  InvasionBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: InvasionBucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
        - Principal: '*'
          Action: '*'
          Effect: Deny
          Resource:
          - Fn::GetAtt:
            - InvasionBucket
            - Arn
          - Fn::Sub: ${InvasionBucket.Arn}/*
          Condition:
            Bool:
              aws:SecureTransport: 'false'
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: invasion
        AttributeType: S
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: invasion
        KeyType: HASH
      - AttributeName: id
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      OnDemandThroughput:
        MaxReadRequestUnits: 5
        MaxWriteRequestUnits: 5
  Ladder:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ladder.lambda_handler
      Runtime: python3.11
      CodeUri: Ladder
      Description: Scan invasion screen shots
      MemorySize: 256
      Timeout: 10
      Policies:
      - TextractPolicy: {}
      - S3ReadPolicy:
          BucketName:
            Fn::Sub: ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Table
      Environment:
        Variables:
          TABLE_NAME:
            Ref: Table
      Events:
        ScanLadder:
          Type: S3
          Properties:
            Bucket:
              Ref: InvasionBucket
            Events:
            - s3:ObjectCreated:*
    Metadata:
      SamResourceId: Ladder
  LadderLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${Ladder}
      RetentionInDays: 30
  Report:
    Type: AWS::Serverless::Function
    Properties:
      Handler: report.lambda_handler
      Runtime: python3.11
      CodeUri: Report
      Description: Report invasion scan results
      MemorySize: 256
      Timeout: 10
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: Table
      Environment:
        Variables:
          TABLE_NAME:
            Ref: Table
      Events:
        ApiGET:
          Type: Api
          Properties:
            Path: /invasions
            Method: GET
            RestApiId:
              Ref: Api
        ApiGETladder:
          Type: Api
          Properties:
            Path: /ladder/{invasion}
            Method: GET
            RestApiId:
              Ref: Api
        ApiGETcsv:
          Type: Api
          Properties:
            Path: /csv/{invasion}
            Method: GET
            RestApiId:
              Ref: Api
    Metadata:
      SamResourceId: Report
  ReportLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${Report}
      RetentionInDays: 30
  Storage:
    Type: AWS::Serverless::Function
    Properties:
      Handler: storage.lambda_handler
      Runtime: python3.11
      CodeUri: Storage
      Description: Implement APIs for invasion S3 bucket
      MemorySize: 256
      Timeout: 10
      Policies:
      - S3WritePolicy:
          BucketName:
            Fn::Sub: ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}
      Environment:
        Variables:
          BUCKET_NAME:
            Fn::Sub: ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}
      Events:
        ApiGETcsv:
          Type: Api
          Properties:
            Path: /add/{invasion}
            Method: POST
            RestApiId:
              Ref: Api
    Metadata:
      SamResourceId: Storage
  StorageLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${Storage}
      RetentionInDays: 30
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub:
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /add:
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/invasion'
                required: true
              responses:
                '200':
                  description: 200 response
                  content: {}
              x-amazon-apigateway-request-validator: Validate body
              x-amazon-apigateway-integration:
                httpMethod: POST
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Storage.Arn}/invocations
                responses:
                  default:
                    statusCode: '200'
                passthroughBehavior: when_no_match
                contentHandling: CONVERT_TO_TEXT
                type: aws
          /invasions:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Report.Arn}/invocations
                passthroughBehavior: when_no_match
                type: aws_proxy
            options:
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
                    Access-Control-Max-Age:
                      schema:
                        type: string
                  content: {}
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}

                        '
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: when_no_match
                type: mock
          /ladder/{invasion}:
            get:
              parameters:
              - name: invasion
                in: path
                required: true
                schema:
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: POST
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Report.Arn}/invocations
                passthroughBehavior: when_no_match
                type: aws_proxy
            options:
              parameters:
              - name: invasion
                in: path
                required: true
                schema:
                  type: string
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
                    Access-Control-Max-Age:
                      schema:
                        type: string
                  content: {}
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}

                        '
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: when_no_match
                type: mock
          /csv/{invasion}:
            get:
              parameters:
              - name: invasion
                in: path
                required: true
                schema:
                  type: string
              x-amazon-apigateway-integration:
                httpMethod: POST
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Report.Arn}/invocations
                passthroughBehavior: when_no_match
                type: aws_proxy
            options:
              parameters:
              - name: invasion
                in: path
                required: true
                schema:
                  type: string
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: string
                    Access-Control-Allow-Methods:
                      schema:
                        type: string
                    Access-Control-Max-Age:
                      schema:
                        type: string
                  content: {}
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    responseTemplates:
                      application/json: '{}

                        '
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: when_no_match
                type: mock
        components:
          schemas:
            invasion:
              title: Invasion
              required:
              - invasion
              type: object
              properties:
                invasion:
                  type: string
        x-amazon-apigateway-request-validators:
          Validate body:
            validateRequestParameters: false
            validateRequestBody: true
      EndpointConfiguration: REGIONAL
      Cors:
        MaxAge: 5
Outputs:
  Bucket:
    Description: Invasion Bucket
    Value:
      Ref: InvasionBucket
  Endpoint:
    Value:
      Fn::Sub: https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod
