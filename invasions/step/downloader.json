{
    "Comment": "A description of my state machine",
    "StartAt": "CheckInvasionExists",
    "States": {
      "CheckInvasionExists": {
        "Type": "Task",
        "Parameters": {
          "Bucket": "${BucketName}",
          "Key.$": "States.Format('{}/{}/', $.invasion, $.folder)"
        },
        "Resource": "arn:aws:states:::aws-sdk:s3:headObject",
        "ResultPath": "$.CheckInvasionExists",
        "Catch": [
          {
            "ErrorEquals": [
              "States.TaskFailed"
            ],
            "Comment": "Invasion does not exist",
            "Next": "PostInvasionNotDefined",
            "ResultPath": "$.CheckInvasionExists"
          }
        ],
        "Next": "FileIterator"
      },
      "PostInvasionNotDefined": {
        "Type": "Task",
        "Resource": "arn:aws:states:::http:invoke",
        "Parameters": {
          "ApiEndpoint.$": "$.post",
          "Method": "POST",
          "RequestBody": {
            "content": "Invasion not found, did you forget to run invasion add first?"
          },
          "Headers": {
            "Content-Type": "application/json"
          },
          "Authentication": {
            "ConnectionArn": "${DiscordConnection}"
          }
        },
        "Retry": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "BackoffRate": 2,
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "JitterStrategy": "FULL"
          }
        ],
        "Next": "InvasionNotDefined"
      },
      "FileIterator": {
        "Type": "Map",
        "ItemProcessor": {
          "ProcessorConfig": {
            "Mode": "INLINE"
          },
          "StartAt": "DownloadFileToS3",
          "States": {
            "DownloadFileToS3": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "OutputPath": "$.Payload",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${DownloadFunctionArn}"
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "End": true
            }
          }
        },
        "Next": "PostSuccess",
        "ItemsPath": "$.files",
        "ItemSelector": {
          "invasion.$": "$.invasion",
          "filename.$": "$$.Map.Item.Value.filename",
          "url.$": "$$.Map.Item.Value.url"
        },
        "ResultPath": "$.downloads",
        "Catch": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Comment": "Download Failures",
            "Next": "PostDownloadFailed",
            "ResultPath": "$.FileIterator"
          }
        ]
      },
      "PostDownloadFailed": {
        "Type": "Task",
        "Resource": "arn:aws:states:::http:invoke",
        "Parameters": {
          "ApiEndpoint.$": "$.post",
          "Method": "POST",
          "RequestBody": {
            "content": "One or more files could not be downloaded, are you sure you selected the right screenshots?"
          },
          "Headers": {
            "Content-Type": "application/json"
          },
          "Authentication": {
            "ConnectionArn": "${DiscordConnection}"
          }
        },
        "Retry": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "BackoffRate": 2,
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "JitterStrategy": "FULL"
          }
        ],
        "Next": "DownloadFailed"
      },
      "DownloadFailed": {
        "Type": "Fail"
      },
      "PostSuccess": {
        "Type": "Task",
        "Resource": "arn:aws:states:::http:invoke",
        "Parameters": {
          "ApiEndpoint.$": "$.post",
          "Method": "POST",
          "RequestBody": {
            "content": "Screenshots successfully downloaded"
          },
          "Headers": {
            "Content-Type": "application/json"
          },
          "Authentication": {
            "ConnectionArn": "${DiscordConnection}"
          }
        },
        "Retry": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "BackoffRate": 2,
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "JitterStrategy": "FULL"
          }
        ],
        "Next": "Success"
      },
      "Success": {
        "Type": "Succeed"
      },
      "InvasionNotDefined": {
        "Type": "Fail"
      }
    }
  }