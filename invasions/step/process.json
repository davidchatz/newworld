{
  "Comment": "A description of my state machine",
  "StartAt": "CheckInvasionRegistration",
  "States": {
    "CheckInvasionRegistration": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:getItem",
      "Parameters": {
        "TableName": "invasions-Table-1KHB8TJ0DA58Y",
        "Key": {
          "invasion": {
            "S": "#invasion"
          },
          "id": {
            "S.$": "$.invasion"
          }
        }
      },
      "Next": "Choice",
      "ResultPath": "$.CheckInvasionRegistration",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "ErrorInvasionRegistration",
          "ResultPath": "$.Error"
        }
      ],
      "ResultSelector": {
        "Item.$": "$.Item"
      }
    },
    "Choice": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.CheckInvasionRegistration.Item",
          "IsPresent": true,
          "Next": "FileIterator"
        }
      ],
      "Default": "ErrorInvasionRegistration"
    },
    "ErrorInvasionRegistration": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Parameters": {
        "ApiEndpoint.$": "$.post",
        "Method": "POST",
        "RequestBody": {
          "content.$": "States.Format('Failed to register invasion {}', $.invasion)"
        },
        "Headers": {
          "Content-Type": "application/json"
        },
        "Authentication": {
          "ConnectionArn": "${DiscordConnection}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Fail"
    },
    "FileIterator": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "DownloadFileToS3",
        "States": {
          "DownloadFileToS3": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "Payload.$": "$",
              "FunctionName": "${DownloadFunctionArn}"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ],
            "Next": "PostFileDownloaded",
            "Catch": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "Comment": "No point proceeding if file is not downloaded",
                "Next": "ErrorDownloadingFile",
                "ResultPath": "$.Error"
              }
            ],
            "ResultPath": "$.DownloadFileToS3"
          },
          "ErrorDownloadingFile": {
            "Type": "Task",
            "Resource": "arn:aws:states:::http:invoke",
            "Parameters": {
              "ApiEndpoint.$": "$.post",
              "Method": "POST",
              "RequestBody": {
                "content.$": "States.Format('Failed to download file {} ({}) for invasion {}', $.filename, $.process, $.invasion)"
              },
              "Headers": {
                "Content-Type": "application/json"
              },
              "Authentication": {
                "ConnectionArn": "${DiscordConnection}"
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "BackoffRate": 2,
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "JitterStrategy": "FULL"
              }
            ],
            "Next": "FailDownloadingFile",
            "ResultPath": "$.Error"
          },
          "FailDownloadingFile": {
            "Type": "Fail"
          },
          "PostFileDownloaded": {
            "Type": "Task",
            "Resource": "arn:aws:states:::http:invoke",
            "Parameters": {
              "ApiEndpoint.$": "$.post",
              "Method": "POST",
              "RequestBody": {
                "content.$": "States.Format('File {} ({}) downloaded for invasion {}, next process image', $.filename, $.process, $.invasion)"
              },
              "Headers": {
                "Content-Type": "application/json"
              },
              "Authentication": {
                "ConnectionArn": "${DiscordConnection}"
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "BackoffRate": 2,
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "JitterStrategy": "FULL"
              }
            ],
            "Next": "SelectProcess",
            "ResultPath": "$.PostFileDownloaded"
          },
          "SelectProcess": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.process",
                "StringEquals": "Ladder",
                "Next": "ProcessLadder"
              },
              {
                "Variable": "$.process",
                "StringEquals": "Roster",
                "Next": "ProcessRoster"
              }
            ],
            "Default": "ErrorUnknownProcess"
          },
          "ErrorUnknownProcess": {
            "Type": "Task",
            "Resource": "arn:aws:states:::http:invoke",
            "Parameters": {
              "ApiEndpoint.$": "$.post",
              "Method": "POST",
              "RequestBody": {
                "content.$": "States.Format('Unknown process {} to process downloaded file {} for invasion {}', $.process, $.filename, $.invasion)"
              },
              "Headers": {
                "Content-Type": "application/json"
              },
              "Authentication": {
                "ConnectionArn": "${DiscordConnection}"
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "BackoffRate": 2,
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "JitterStrategy": "FULL"
              }
            ],
            "Next": "FailProcessing",
            "ResultPath": "$.Error"
          },
          "ProcessLadder": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "Payload.$": "$",
              "FunctionName": "${LadderFunctionArn}"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ],
            "ResultPath": "$.Process",
            "Catch": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "Comment": "If we fail to process the download",
                "Next": "ErrorProcessingFailed",
                "ResultPath": "$.Error"
              }
            ],
            "End": true
          },
          "ErrorProcessingFailed": {
            "Type": "Task",
            "Resource": "arn:aws:states:::http:invoke",
            "Parameters": {
              "ApiEndpoint.$": "$.post",
              "Method": "POST",
              "RequestBody": {
                "content.$": "States.Format('Failed to process file {} ({}) for invasion {}', $.filename, $.process, $.invasion)"
              },
              "Headers": {
                "Content-Type": "application/json"
              },
              "Authentication": {
                "ConnectionArn": "${DiscordConnection}"
              }
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "BackoffRate": 2,
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "JitterStrategy": "FULL"
              }
            ],
            "Next": "FailProcessing",
            "ResultPath": "$.Error"
          },
          "FailProcessing": {
            "Type": "Fail"
          },
          "ProcessRoster": {
            "Type": "Task",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "Payload.$": "$",
              "FunctionName": "${BoardFunctionArn}"
            },
            "Retry": [
              {
                "ErrorEquals": [
                  "Lambda.ServiceException",
                  "Lambda.AWSLambdaException",
                  "Lambda.SdkClientException",
                  "Lambda.TooManyRequestsException"
                ],
                "IntervalSeconds": 1,
                "MaxAttempts": 3,
                "BackoffRate": 2
              }
            ],
            "ResultPath": "$.Process",
            "Catch": [
              {
                "ErrorEquals": [
                  "States.ALL"
                ],
                "Comment": "If processing download fails",
                "Next": "ErrorProcessingFailed",
                "ResultPath": "$.Error"
              }
            ],
            "End": true
          }
        }
      },
      "Next": "FileProcessed",
      "ItemsPath": "$.files",
      "ItemSelector": {
        "post.$": "$.post",
        "invasion.$": "$.invasion",
        "filename.$": "$$.Map.Item.Value.filename",
        "folder.$": "$.folder",
        "url.$": "$$.Map.Item.Value.url",
        "process.$": "$.process"
      },
      "ResultPath": "$.downloads",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Comment": "Download Failures",
          "Next": "PostDownloadFailed",
          "ResultPath": "$.FileIterator"
        }
      ]
    },
    "FileProcessed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Parameters": {
        "ApiEndpoint.$": "$.post",
        "Method": "POST",
        "RequestBody": {
          "content.$": "States.Format('File(s) ({}) downloaded and processed for invasion {}, next update invasion stats', $.process, $.invasion)"
        },
        "Headers": {
          "Content-Type": "application/json"
        },
        "Authentication": {
          "ConnectionArn": "${DiscordConnection}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "UpdateInvasionStats"
    },
    "UpdateInvasionStats": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${InvasionFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "PostInvasionReportLink",
      "ResultPath": "$.UpdateInvasionStats",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Comment": "Report if we fail to process stats for an invasion",
          "Next": "PostInvasionStatsFail",
          "ResultPath": "$.Error"
        }
      ]
    },
    "PostInvasionStatsFail": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Parameters": {
        "ApiEndpoint.$": "$.post",
        "Method": "POST",
        "RequestBody": {
          "content.$": "States.Format('Failed to update stats for invasion {}', $.invasion)"
        },
        "Headers": {
          "Content-Type": "application/json"
        },
        "Authentication": {
          "ConnectionArn": "${DiscordConnection}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Fail"
    },
    "PostInvasionReportLink": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Parameters": {
        "ApiEndpoint.$": "$.post",
        "Method": "POST",
        "RequestBody": {
          "content.$": "States.Format('Invasion {} stats updated', $.invasion)"
        },
        "Headers": {
          "Content-Type": "application/json"
        },
        "Authentication": {
          "ConnectionArn": "${DiscordConnection}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "UpdateMonthlyStats"
    },
    "UpdateMonthlyStats": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "Payload.$": "$",
        "FunctionName": "${InvasionFunctionArn}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "PostMonthlyReportLink",
      "ResultPath": "$.UpdateMonthlyStats",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Comment": "If monthly stats fail",
          "Next": "PostMonthlyStatsFail",
          "ResultPath": "$.Error"
        }
      ]
    },
    "PostMonthlyStatsFail": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Parameters": {
        "ApiEndpoint.$": "$.post",
        "Method": "POST",
        "RequestBody": {
          "content.$": "States.Format('Failed to update stats for month {}', $.month)"
        },
        "Headers": {
          "Content-Type": "application/json"
        },
        "Authentication": {
          "ConnectionArn": "${DiscordConnection}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Fail"
    },
    "PostDownloadFailed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Parameters": {
        "ApiEndpoint.$": "$.post",
        "Method": "POST",
        "RequestBody": {
          "content.$": "States.Format('One or more ({}) downloads failed for invasion {}', $.process, $.invasion)"
        },
        "Headers": {
          "Content-Type": "application/json"
        },
        "Authentication": {
          "ConnectionArn": "${DiscordConnection}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Fail"
    },
    "Fail": {
      "Type": "Fail"
    },
    "PostMonthlyReportLink": {
      "Type": "Task",
      "Resource": "arn:aws:states:::http:invoke",
      "Parameters": {
        "ApiEndpoint.$": "$.post",
        "Method": "POST",
        "RequestBody": {
          "content.$": "States.Format('Month {} stats updated', $.month)"
        },
        "Headers": {
          "Content-Type": "application/json"
        },
        "Authentication": {
          "ConnectionArn": "${DiscordConnection}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "BackoffRate": 2,
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Success"
    },
    "Success": {
      "Type": "Succeed"
    }
  }
}