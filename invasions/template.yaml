---
# define sam cloudformation template for a lambda function
AWSTemplateFormatVersion: '2010-09-09'

Transform: AWS::Serverless-2016-10-31

Description: Scan invasions files

Resources:

  InvasionBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
      # AccessControl: Private
      # VersioningConfiguration:
      #   Status: Enabled
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  InvasionBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref InvasionBucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt InvasionBucket.Arn
              - !Sub ${InvasionBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'

  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: invasion
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: invasion
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      OnDemandThroughput:
        MaxReadRequestUnits: 5
        MaxWriteRequestUnits: 5

  Ladder:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ladder.lambda_handler
      Runtime: python3.11
      CodeUri: src
      Description: 'Scan invasion screen shots'
      MemorySize: 256
      Timeout: 10
      Policies: 
        - TextractPolicy: {}
        - S3ReadPolicy:
            BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
      Events:
        ScanLadder:
          Type: S3
          Properties:
            Bucket: !Ref InvasionBucket
            Events:
              - s3:ObjectCreated:*

  LadderLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${Ladder}
      RetentionInDays: 30

  Report:
    Type: AWS::Serverless::Function
    Properties:
      Handler: report.lambda_handler
      Runtime: python3.11
      CodeUri: src
      Description: 'Report invasion scan results'
      MemorySize: 256
      Timeout: 10
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
      Events:
        ApiGETladder:
          Type: Api
          Properties:
            Path: /ladder/{invasion}
            Method: GET
            RestApiId: !Ref Api
        ApiGETcsv:
          Type: Api
          Properties:
            Path: /csv/{invasion}
            Method: GET
            RestApiId: !Ref Api

  ReportLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${Report}
      RetentionInDays: 30

  Invasion:
    Type: AWS::Serverless::Function
    Properties:
      Handler: invasion.lambda_handler
      Runtime: python3.11
      CodeUri: src
      Description: 'Implement APIs for invasion S3 bucket'
      MemorySize: 256
      Timeout: 10
      Policies: 
        - S3WritePolicy:
            BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Environment:
        Variables:
          BUCKET_NAME: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
          TABLE_NAME: !Ref Table
      Events:
        ApiGET:
          Type: Api
          Properties:
            Path: /invasion
            Method: GET
            RestApiId: !Ref Api
        ApiPOSTadd:
          Type: Api
          Properties:
            Path: /invasion/add/{invasion}
            Method: POST
            RestApiId: !Ref Api

  InvasionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${Invasion}
      RetentionInDays: 30

  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub 'Invasions API from ${AWS::StackName}'
      StageName: prod
      EndpointConfiguration:
        Type: REGIONAL
      # TracingEnabled: true
      Cors:
        MaxAge: 5
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: "Api From Stack invasions"
          version: "2024-05-12T23:32:55Z"
        paths:
          /invasions:
            get:
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Invasion.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /invasions/add:
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/invasion"
                required: true
              x-amazon-apigateway-request-validator: "Validate body"
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Invasion.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /csv/{invasion}:
            get:
              parameters:
              - name: "invasion"
                in: "path"
                required: true
                schema:
                  type: "string"
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Report.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                type: "aws_proxy"
            options:
              parameters:
              - name: "invasion"
                in: "path"
                required: true
                schema:
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Max-Age:
                      schema:
                        type: "string"
                  content: {}
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /ladder/{invasion}:
            get:
              parameters:
              - name: "invasion"
                in: "path"
                required: true
                schema:
                  type: "string"
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Report.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                type: "aws_proxy"
            options:
              parameters:
              - name: "invasion"
                in: "path"
                required: true
                schema:
                  type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      schema:
                        type: "string"
                    Access-Control-Allow-Methods:
                      schema:
                        type: "string"
                    Access-Control-Max-Age:
                      schema:
                        type: "string"
                  content: {}
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      application/json: "{}\n"
                requestTemplates:
                  application/json: "{\n  \"statusCode\" : 200\n}\n"
                passthroughBehavior: "when_no_match"
                type: "mock"
        components:
          schemas:
            invasion:
              title: "Invasion"
              required:
              - "day"
              - "month"
              - "settlement"
              - "win"
              - "year"
              type: "object"
              properties:
                year:
                  maximum: 2100
                  minimum: 2024
                  type: "number"
                month:
                  maximum: 12
                  minimum: 1
                  type: "number"
                day:
                  maximum: 31
                  minimum: 1
                  type: "number"
                notes:
                  type: "string"
                win:
                  type: "boolean"
                settlement:
                  type: "string"
                  enum:
                  - "bw"
                  - "bs"
                  - "ck"
                  - "er"
                  - "eg"
                  - "ef"
                  - "mb"
                  - "md"
                  - "rw"
                  - "rs"
                  - "wf"
                  - "ww"
        x-amazon-apigateway-request-validators:
          Validate body:
            validateRequestParameters: false
            validateRequestBody: true

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AliasAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: False
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
          
  PoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: Invasion
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      PreventUserExistenceErrors: ENABLED
      # SupportedIdentityProviders:
      #   - COGNITO
      # AllowedOAuthFlows:
      #   - "implicit"
      # AllowedOAuthScopes:
      #   - "email"
      #   - "openid"
      # AllowedOAuthFlowsUserPoolClient: true
      # CallbackURLs: 
      #   - !Sub
      #     - 'https://${DemoDNS}/app/login/oauth2/code/cognito'
      #     - DemoDNS: invasion.chatz.link      
      # LogoutURLs:
      #   - !Sub
      #     - 'https://${DemoDNS}/app/logout'
      #     - DemoDNS: invasion.chatz.link

  WebAppUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: invasion-chatz-link
      UserPoolId: !Ref UserPool

  # IdentityPool:
  #   Type: AWS::Cognito::IdentityPool
  #   Properties:
  #     AllowUnauthenticatedIdentities: false
  #     CognitoIdentityProviders:
  #       - ClientId:
  #           !Ref PoolClient
  #         ProviderName:
  #           !GetAtt Pool.ProviderName

  # IdentityPoolRoles:
  #   Type: AWS::Cognito::IdentityPoolRoleAttachment
  #   Properties:
  #     IdentityPoolId:
  #       !Ref IdentityPool
  #     Roles:
  #       authenticated:
  #         !Sub arn:aws:iam::${AWS::AccountId}:role/PollyCognitoAuthRole


Outputs:
  Bucket:
    Description: Invasion Bucket
    Value: !Ref InvasionBucket

  Endpoint:
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod