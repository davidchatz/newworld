---
# define sam cloudformation template for a lambda function
AWSTemplateFormatVersion: '2010-09-09'

Transform: AWS::Serverless-2016-10-31

Description: Scan invasions files

Parameters:

  Timezone:
    Type: String
    Default: Australia/Sydney

  SsmPrefix:
    # Default: /chatzinvasionstats
    Default: /chatzinvasionhttp
    Type: String

  PublicKeyPath:
    Default: publickey
    Type: String

  AppIdPath:
    Default: appid
    Type: String

  BotTokenPath:
    Default: bottoken
    Type: String

  ServerIdPath:
    Default: chatzdev/serverid
    Type: String

  DiscordCmd:
    Default: irus
    Type: String

  DiscordWebHookURL:
    Default: "https://discord.com/api/v10/webhooks"
    Type: String

Resources:

  InvasionBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  InvasionBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref InvasionBucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt InvasionBucket.Arn
              - !Sub ${InvasionBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'

  Table:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: invasion
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: invasion
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      OnDemandThroughput:
        MaxReadRequestUnits: 5
        MaxWriteRequestUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  Ladder:
    Type: AWS::Serverless::Function
    Properties:
      Handler: ladder.lambda_handler
      Runtime: python3.11
      CodeUri: src/ladder
      Description: 'Scan invasion screen shots'
      MemorySize: 256
      Timeout: 10
      Policies: 
        - TextractPolicy: {}
        - S3ReadPolicy:
            BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
      Events:
        ScanLadder:
          Type: S3
          Properties:
            Bucket: !Ref InvasionBucket
            Events:
              - s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: "ladders/"
                  - Name: suffix
                    Value: .png

  LadderLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${Ladder}
      RetentionInDays: 30

  Board:
    Type: AWS::Serverless::Function
    Properties:
      Handler: board.lambda_handler
      Runtime: python3.11
      CodeUri: src/board
      Description: 'Scan invasion roster screen shots'
      MemorySize: 256
      Timeout: 10
      Policies: 
        - TextractPolicy: {}
        - S3ReadPolicy:
            BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Environment:
        Variables:
          TABLE_NAME: !Ref Table
      Events:
        ScanLadder:
          Type: S3
          Properties:
            Bucket: !Ref InvasionBucket
            Events:
              - s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: "boards/"
                  - Name: suffix
                    Value: .png

  BoardLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${Board}
      RetentionInDays: 30

  Download:
    Type: AWS::Serverless::Function
    Properties:
      Handler: download.lambda_handler
      Runtime: python3.11
      CodeUri: src/download
      Description: 'Download invasion screen shots from discord'
      MemorySize: 256
      Timeout: 10
      Policies: 
        - S3CrudPolicy:
            BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
      Environment:
        Variables:
          BUCKET_NAME: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"

  DownloadLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${Download}
      RetentionInDays: 30

  DiscordConnection:
    Type: AWS::Events::Connection
    Properties:
      Description: Connection to send async responses to Discord
      # Discord does not require authentication, its embedded in the URL path, but eventbridge requires something
      # to be defined.
      AuthorizationType: API_KEY
      AuthParameters:
        ApiKeyAuthParameters:
          ApiKeyName: foo
          ApiKeyValue: bah

  DownloadStepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionSubstitutions:
        DownloadFunctionArn: !GetAtt Download.Arn
        BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
        DiscordConnection: !GetAtt DiscordConnection.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref Download
        - S3CrudPolicy:
            BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
        # https://docs.aws.amazon.com/step-functions/latest/dg/connect-third-party-apis.html#connect-http-task-permissions
        - Statement:
          - Effect: Allow
            Action:
              - states:InvokeHTTPEndpoint
            Resource: "*"
            Condition:
              "StringEquals":
                "states:HTTPMethod": "POST"
              "StringLike":
                    "states:HTTPEndpoint": !Sub "${DiscordWebHookURL}/*"
          - Effect: Allow
            Action:
              - events:RetrieveConnectionCredentials
            Resource: !GetAtt DiscordConnection.Arn
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Resource: !Sub "arn:${AWS::Partition}:secretsmanager:*:*:secret:events!connection/*"
      DefinitionUri: step/downloader.json

  Bot:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bot.lambda_handler
      Runtime: python3.11
      CodeUri: src/bot
      Description: 'Discord Invasion Bot'
      MemorySize: 256
      Timeout: 10
      Policies: 
        - SSMParameterReadPolicy:
            ParameterName: "*"
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        - S3CrudPolicy:
            BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt DownloadStepFunction.Name
      Environment:
        Variables:
          PUBLIC_KEY_PATH: !Sub "${SsmPrefix}/${PublicKeyPath}"
          APP_ID_PATH: !Sub "${SsmPrefix}/${AppIdPath}"
          TABLE_NAME: !Ref Table
          DISCORD_CMD: !Ref DiscordCmd
          BUCKET_NAME: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
          DOWNLOADER_STEP_FUNC: !Ref DownloadStepFunction
          WEBHOOK_URL: !Ref DiscordWebHookURL
          TZ: !Ref Timezone
      Events:
        ApiPOSTdiscord:
          Type: Api
          Properties:
            Path: /discord
            Method: POST
            RestApiId: !Ref Api

  BotLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${Bot}
      RetentionInDays: 30

  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub 'Invasions API from ${AWS::StackName}'
      StageName: prod
      EndpointConfiguration:
        Type: REGIONAL
      # TracingEnabled: true
      Cors:
        MaxAge: 5
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: "Discord Invasions API"
          version: "2024-05-12T23:32:55Z"
        paths:
          /discord:
            post:
              responses:
                "401":
                  description: "401 response"
                  content: {}
                "200":
                  description: "200 response"
                  content: {}
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Bot.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"

Outputs:
  Bucket:
    Description: Invasion Bucket
    Value: !Ref InvasionBucket

  InteractionsEndpointUrl:
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/discord