---
# define sam cloudformation template for a lambda function
AWSTemplateFormatVersion: '2010-09-09'

Transform: AWS::Serverless-2016-10-31

Description: Scan invasions files

Parameters:

  Timezone:
    Type: String
    Default: Australia/Sydney

  SsmPrefix:
    Default: /irustest
    # Default: /chatzinvasionstats
    Type: String

  PublicKeyPath:
    Default: publickey
    Type: String

  AppIdPath:
    Default: appid
    Type: String

  RoleIdPath:
    Default: roleid
    Type: String

  BotTokenPath:
    Default: bottoken
    Type: String

  ServerIdPath:
    Default: serverid
    Type: String

  DiscordCmd:
    Default: irus
    Type: String

  DiscordWebHookURL:
    Default: "https://discord.com/api/v10/webhooks"
    Type: String

  LogLevel:
    Type: String
    AllowedValues:
      - DEBUG
      - INFO
      - WARNING
      - ERROR
      - CRITICAL
    Default: INFO

# Mappings:
  
  # https://docs.powertools.aws.dev/lambda/python/latest/#local-development
  # LambdaPowerTools:
  #   ap-southeast-1:
  #     ARN: arn:aws:lambda:ap-southeast-1:017000801446:layer:AWSLambdaPowertoolsPythonV2:71
  #   ap-southeast-2:
  #     ARN: arn:aws:lambda:ap-southeast-2:017000801446:layer:AWSLambdaPowertoolsPythonV2:71


Globals:

  Function:
    Runtime: python3.11
    Timeout: 10
    Layers:
      # - !FindInMap [ "LambdaPowerTools", !Ref "AWS::Region", "ARN" ]
      - !GetAtt AwsLambdaPowertoolsPythonLayer.Outputs.LayerVersionArn
      - !Ref IrusLayer
    Environment:
      Variables:
        POWERTOOLS_LOG_LEVEL: !Ref LogLevel
        PUBLIC_KEY_PATH: !Sub "${SsmPrefix}/${PublicKeyPath}"
        APP_ID_PATH: !Sub "${SsmPrefix}/${AppIdPath}"
        ROLE_ID_PATH: !Sub "${SsmPrefix}/${RoleIdPath}"
        TABLE_NAME: !Ref Table
        DISCORD_CMD: !Ref DiscordCmd
        BUCKET_NAME: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
        WEBHOOK_URL: !Ref DiscordWebHookURL

Resources:

  InvasionBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  InvasionBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref InvasionBucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt InvasionBucket.Arn
              - !Sub ${InvasionBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'

  Table:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: invasion
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: invasion
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      OnDemandThroughput:
        MaxReadRequestUnits: 5
        MaxWriteRequestUnits: 5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # https://docs.powertools.aws.dev/lambda/python/latest/#sar
  AwsLambdaPowertoolsPythonLayer:
    Type: AWS::Serverless::Application
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Location:
        ApplicationId: arn:aws:serverlessrepo:eu-west-1:057560766410:applications/aws-lambda-powertools-python-layer
        SemanticVersion: 2.0.0 # change to latest semantic version available in SAR

  IrusLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/layer
      CompatibleRuntimes:
        - python3.11
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: python3.11
      BuildArchitecture: x86_64  

  Process:
    Type: AWS::Serverless::Function
    Properties:
      Handler: process.lambda_handler
      Runtime: python3.11
      CodeUri: src/process
      Description: 'Download and scan invasion screen shots'
      MemorySize: 256
      Timeout: 20
      Policies: 
        - TextractPolicy: {}
        - S3CrudPolicy:
            BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: Process

  ProcessLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${Process}
      RetentionInDays: 30

  Invasion:
    Type: AWS::Serverless::Function
    Properties:
      Handler: invasion.lambda_handler
      Runtime: python3.11
      CodeUri: src/invasion
      Description: 'Generate invasion report'
      MemorySize: 256
      Timeout: 10
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: Invasion
      Policies: 
        - TextractPolicy: {}
        - S3CrudPolicy:
            BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
        - DynamoDBCrudPolicy:
            TableName: !Ref Table

  InvasionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${Invasion}
      RetentionInDays: 30

  Month:
    Type: AWS::Serverless::Function
    Properties:
      Handler: month.lambda_handler
      Runtime: python3.11
      CodeUri: src/month
      Description: 'Generate monthly reports'
      MemorySize: 256
      Timeout: 10
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: Month
      Policies: 
        - TextractPolicy: {}
        - S3CrudPolicy:
            BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
        - DynamoDBCrudPolicy:
            TableName: !Ref Table

  MonthLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${Month}
      RetentionInDays: 30

  DiscordConnection:
    Type: AWS::Events::Connection
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W2501
            # Username and password with Discord webhooks are not used for authentication and are not sensitive
    Properties:
      Description: Connection to send async responses to Discord
      AuthorizationType: BASIC
      AuthParameters:
        BasicAuthParameters:
          Username: "foo"
          Password: "bah"

  ProcessStepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionSubstitutions:
        ProcessFunctionArn: !GetAtt Process.Arn
        InvasionFunctionArn: !GetAtt Invasion.Arn
        MonthFunctionArn: !GetAtt Month.Arn
        BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
        DiscordConnection: !GetAtt DiscordConnection.Arn
        TableName: !Ref Table
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref Process
        - LambdaInvokePolicy:
            FunctionName: !Ref Invasion
        - LambdaInvokePolicy:
            FunctionName: !Ref Month
        - DynamoDBReadPolicy:
            TableName: !Ref Table
        - S3CrudPolicy:
            BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
        - Statement:
          - Effect: Allow
            Action:
              - "cloudwatch:*"
              - "logs:*"
            Resource: "*"
        # https://docs.aws.amazon.com/step-functions/latest/dg/connect-third-party-apis.html#connect-http-task-permissions
        - Statement:
          - Effect: Allow
            Action:
              - states:InvokeHTTPEndpoint
            Resource: "*"
            Condition:
              "StringEquals":
                "states:HTTPMethod": "POST"
              "StringLike":
                    "states:HTTPEndpoint": !Sub "${DiscordWebHookURL}/*"
          - Effect: Allow
            Action:
              - events:RetrieveConnectionCredentials
            Resource: !GetAtt DiscordConnection.Arn
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Resource: !Sub "arn:${AWS::Partition}:secretsmanager:*:*:secret:events!connection/*"
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt ProcessStateMachineLogGroup.Arn
      DefinitionUri: step/process.json

  ProcessStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Join [ "/", [ "stepfunctions", !Ref AWS::StackName, "processStateMachine"]]
      RetentionInDays: 30

  PostTableStepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionSubstitutions:
        DiscordConnection: !GetAtt DiscordConnection.Arn
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - "cloudwatch:*"
              - "logs:*"
            Resource: "*"
        # https://docs.aws.amazon.com/step-functions/latest/dg/connect-third-party-apis.html#connect-http-task-permissions
        - Statement:
          - Effect: Allow
            Action:
              - states:InvokeHTTPEndpoint
            Resource: "*"
            Condition:
              "StringEquals":
                "states:HTTPMethod": "POST"
              "StringLike":
                    "states:HTTPEndpoint": !Sub "${DiscordWebHookURL}/*"
          - Effect: Allow
            Action:
              - events:RetrieveConnectionCredentials
            Resource: !GetAtt DiscordConnection.Arn
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Resource: !Sub "arn:${AWS::Partition}:secretsmanager:*:*:secret:events!connection/*"
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource: !Sub "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:PostTableStepFunction-*"
          - Effect: Allow
            Action:
             - states:DescribeExecution
             - states:StopExecution
            Resource: !Sub "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:execution:stateMachineName:*"
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt PostTableStateMachineLogGroup.Arn
      DefinitionUri: step/posttable.json

  PostTableStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Join [ "/", [ "stepfunctions", !Ref AWS::StackName, "postTableStateMachine"]]
      RetentionInDays: 30

  DeadHandStepFunction:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionSubstitutions:
        ProcessStepFunc: !Ref ProcessStepFunction
        DiscordConnection: !GetAtt DiscordConnection.Arn
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource: !GetAtt ProcessStepFunction.Arn
          - Effect: Allow
            Action:
              - states:DescribeExecution
              - states:StopExecution
            Resource: "*"
        - Statement:
          - Effect: Allow
            Action:
            - events:PutTargets
            - events:PutRule
            - events:DescribeRule
            Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule
          - Effect: Allow
            Action:
              - "cloudwatch:*"
              - "logs:*"
            Resource: "*"
          # https://docs.aws.amazon.com/step-functions/latest/dg/connect-third-party-apis.html#connect-http-task-permissions
        - Statement:
          - Effect: Allow
            Action:
              - states:InvokeHTTPEndpoint
            Resource: "*"
            Condition:
              "StringEquals":
                "states:HTTPMethod": "POST"
              "StringLike":
                    "states:HTTPEndpoint": !Sub "${DiscordWebHookURL}/*"
          - Effect: Allow
            Action:
              - events:RetrieveConnectionCredentials
            Resource: !GetAtt DiscordConnection.Arn
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Resource: !Sub "arn:${AWS::Partition}:secretsmanager:*:*:secret:events!connection/*"
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt DeadHandStateMachineLogGroup.Arn
      DefinitionUri: step/deadhand.json

  DeadHandStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Join [ "/", [ "stepfunctions", !Ref AWS::StackName, "deadhandStateMachine"]]
      RetentionInDays: 30

  Bot:
    Type: AWS::Serverless::Function
    Properties:
      Handler: bot.lambda_handler
      Runtime: python3.11
      CodeUri: src/bot
      Description: 'Discord Invasion Bot'
      MemorySize: 256
      Timeout: 10
      Policies: 
        - SSMParameterReadPolicy:
            ParameterName: "*"
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
        - S3CrudPolicy:
            BucketName: !Sub "${AWS::StackName}-${AWS::AccountId}-${AWS::Region}"
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt DeadHandStepFunction.Name
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt PostTableStepFunction.Name
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: Bot
          PROCESS_STEP_FUNC: !Ref DeadHandStepFunction
          POST_STEP_FUNC: !Ref PostTableStepFunction
          TZ: !Ref Timezone
      Events:
        ApiPOSTdiscord:
          Type: Api
          Properties:
            Path: /discord
            Method: POST
            RestApiId: !Ref Api

  BotLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${Bot}
      RetentionInDays: 30

  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub 'Invasions API from ${AWS::StackName}'
      StageName: prod
      EndpointConfiguration:
        Type: REGIONAL
      # TracingEnabled: true
      Cors:
        MaxAge: 5
      DefinitionBody:
        openapi: "3.0.1"
        info:
          title: "Discord Invasions API"
          version: "2024-05-12T23:32:55Z"
        paths:
          /discord:
            post:
              responses:
                "401":
                  description: "401 response"
                  content: {}
                "200":
                  description: "200 response"
                  content: {}
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Bot.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"

Outputs:
  Bucket:
    Description: Invasion Bucket
    Value: !Ref InvasionBucket

  Table:
    Value: !Ref Table

  DeadHandStepFunctionArn:
    Value: !Ref DeadHandStepFunction

  ProcessStepFunctionArn:
    Value: !Ref ProcessStepFunction

  PostTableStepFunctionArn:
    Value: !Ref PostTableStepFunction  

  InteractionsEndpointUrl:
    Value: !Sub https://${Api}.execute-api.${AWS::Region}.amazonaws.com/prod/discord
